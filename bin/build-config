#!/usr/bin/env php
<?php
/**
 * Appfuel
 * Copyright (c) Robert Scott-Buccleuch <rsb.appfuel@gmail.com>
 * See LICENSE file at project root for details.
 */
use Appfuel\App\AppRegistry,
    Appfuel\Filesystem\FileFinder,
    Appfuel\Filesystem\FileReader,
    Appfuel\Filesystem\FileWriter;

/**
 * build-config: will generate a cached configuration file based on a 
 * build strategy.
 *
 * cli args: any argument will be considered a path to a config file to 
 *           process
 *  options: 
 *  -e, --env [required]
 *      name of the enviroment to build
 * 
 *  -t, --target-env [default: production]
 *      name of the target you want to merge with
 * 
 *  -c, --config-file [default: <base-path>/app/config-settings.php]
 *      absolute path to the config file to be processed
 *
 *  -b, --build-file [default: <base-path>/app/build/config.json]  
 *      absolute path to the generated config file
 */
$base = realpath(__DIR__ . "/../");

/*
 * Used to control the app-header.php script. $appType gives us cli handler
 * and configAction tells the header to replace the config data with ours.
 * Since we are the building configuration data we can not rely on config
 * data to be arround, so we use our own values
 */
$ctrl = array(
    'app-type'          => 'cli',
    'config-action'     => 'replace',
    'config-settings'   => array(
	    'php-error-level'			=> 'all strict',
	    'php-include-path'			=> array($base),
	    'php-include-path-replace'	=> 'replace',
	    'php-display-errors'		=> 'on',
	    'php-autoloader'			=> 'Appfuel\ClassLoader\StandardAutoloader',
	    'fault-handler-class'		=> 'Appfuel\Kernel\FaultHandler',
	    'php-default-timezone'		=> 'America/Los_Angeles'
    ),
);
$handler = require "{$base}/app/app-header.php";

$input   = $handler->createConsoleInput($_SERVER['argv']);
$appPath = AppRegistry::getAppPath();

$env = $input->getCliOpt('env', 'e');
if (! $env) {
    $err = "environment -(env|e) is required and not set\n";
    fwrite(STDERR, $err);
    exit(1);
}

$targetEnv = $input->getCliOpt('target-env', 't');
if (! $targetEnv) {
    $targetEnv = 'prod';
}

$file = $input->getCliOpt('config-file', 'c');
if (! $file) {
    $file = $appPath->get('config-settings');
}

$buildFile = $input->getCliOpt('build-file', 'c');
if (! $buildFile) {
    $buildFile = $appPath->get('config-build');
}

$finder = new FileFinder(null, false);
$reader = new FileReader($finder);
if (false !== strpos('.json', $file)) {                                  
    $data = $reader->decodeJsonAt($file);                                
}                                                                        
else {                                                                   
    $data = $reader->import($file);                                      
}

if (! isset($data[$env]) || ! is_array($data[$env])) {
    fwrite(STDERR, "could not find -($env) or is not an array  in -($file)\n");
    exit(1);
}

if (true === $targetEnv) {
    $settings = $data[$env];
}
elseif (isset($data[$targetEnv]) && is_array($data[$targetEnv])){
    $settings = array_replace_recursive($data[$targetEnv], $data[$env]);
}
else {
    $err  = "target env -($targetEnv) was not found or was not an array in ";
    $err .= "-($file) \n";
    fwrite(STDERR, $err);
    exit(1);
}

$writer = new FileWriter($finder);
$result = $writer->putContent(json_encode($settings), $buildFile);
if (! $result) {
    fwrite(STDERR, "could not write to file -($buildFile)\n");
    exit(1);
}
exit(0);
